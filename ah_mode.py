import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
import io

def run_ah_mode():
    st.title("üìä An√°lise de Question√°rios - Altas Habilidades/Superdota√ß√£o")

    arquivo = st.file_uploader("üìÇ Envie o arquivo de respostas (.csv)", type=["csv"])

    mapa_respostas = {"Nunca": 0, "Raramente": 1, "√Äs vezes": 2, "As vezes": 2, "Frequentemente": 3, "Sempre": 4}
    mapa_diagnostico = {
        "Sim": 4, "N√£o": 0,
        "Altas": 4, "Alta": 4,
        "M√©dia": 2, "M√©dias": 2,
        "Baixa": 0, "Baixas": 0
    }

    blocos = {
        "Caracter√≠sticas Gerais": [
            "Voc√™ considera que este aluno/a tem habilidades especiais e se destaca dos demais?",
            "As notas ou conceitos deste(a) aluno(a) na sua disciplina s√£o:",
            "As notas ou conceitos deste(a) aluno(a) na Escola s√£o:",
            "Este(a) aluno(a) d√° a parecer que est√° no \"mundo da lua\" nas aulas?",
            "√â um(a) aluno(a) atento(a) e interessado(a) e um dos melhores da turma?",
        ],
        "Habilidade Acima da M√©dia": [
            "Tem grande curiosidade sobre assuntos incomuns (diferentes dos que interressam aos seus colegas)?",
            "Sua mem√≥ria  muito destacada, especialmente em assuntos que s√£o de seu interesse?",
            "Tem informa√ß√µes sobre os temas que s√£o de seu interesse?",
            "Normalmente aprende mais de uma hist√≥ria, um filme, etc. do que outras crian√ßas de sua idade?",
            "Tenta entender coisas complicadas examinando-as parte por parte?",
            "Aprende rapidademnte coisas que lhe interressam e usa o que arendeu em outras √°reas?",
            "Percebe rapidamente as rela√ß√µes entre as partes e o todo?",
            "Tem vocabul√°rio muito extenso e rico para sua idade (considerando a variedade de palavras, precis√£o vocabular, a complexidade das palavras utilizadas e a constru√ß√£o dos argumentos",
            "Tenta descobrir o ‚Äúcomo‚Äù e o ‚Äúporqu√™‚Äù das coisas fazendo perguntas inteligentes?",
            "Suas notas ou conceitos na escola s√£o melhores que os demais colegas da sua turma?",
            "Aprende mais r√°pido que seus colegas?",
            "Adapta-se facilmente a situa√ß√µes novas ou as modifica?"
        ],
        "Criatividade": [
            "Tem um pensamento abstrato muito desenvolvido?",
            "As ideias que prop√µe s√£o vistas como diferentes ou esquisitas pelos demais?",
            "√â muito curioso/a?",
            "Tem muitas ideias, solu√ß√µes e respostas incomuns, diferentes e inteligentes?",
            "Gosta de arriscar para conseguir algo que quer?",
            "Gosta de enfrentar desafios?",
            "√â muito imaginativo/a e inventivo/a?",
            "√â sens√≠vel √†s coisas bonitas?",
            "√â inconformista e n√£o se importa em ser diferente?",
            "Sabe compreender ideias diferentes das suas?",
            "Fica chateado/a quando tem que repetir um exerc√≠cio de algo que j√° sabe?",
            "Descobre novos e diferentes caminhos para solucionar problemas?",
            "√â questionador/a quando algum adulto fala algo com o qual n√£o concorda?",
            "Presta aten√ß√£o, apenas quando o assunto lhe interessa?",
            "Seus cadernos s√£o incompletos e desorganizados?",
            "N√£o gosta de cumprir regras?"
        ],
        "Comprometimento com a Tarefa": [
            "Dedica muito mais tempo e energia a algum tema ou atividade que gosta ou que lhe interessa?",
            "√â muito exigente e cr√≠tico/a consigo mesmo/a, e nunca fica satisfeito/a com o que faz?",
            "Insiste em buscar solu√ß√µes para os problemas?",
            "Tem sua pr√≥pria organiza√ß√£o?",
            "√â muito seguro/a e, √†s vezes, teimoso/a, em suas convic√ß√µes?",
            "Precisa de pouco ou nenhum est√≠mulo para terminar um trabalho que lhe interessa?",
            "Deixa de fazer outras coisas para envolver-se numa atividade que lhe interessa?",
            "Sabe identificar as √°reas de dificuldade que podem surgir em uma atividade?",
            "Sabe estabelecer prioridades com facilidade?",
            "Consegue prever as etapas e os detalhes para realizar uma atividade?",
            "√â persistente nas atividades que lhe interessam e busca concluir as tarefas?",
            "√â interessado/a e eficiente na organiza√ß√£o de tarefas?",
            "Sabe distinguir as consequ√™ncias e os efeitos de a√ß√µes?"
        ],
        "Lideran√ßa": [
            "√â autossuficiente?",
            "√â escolhido/a pelos seus colegas e amigos para fun√ß√µes de l√≠der (l√≠der de turma, coordenador/a)?",
            "√â cooperativo/a com os demais?",
            "Tende a organizar o grupo?",
            "Sabe se expressar bem e convence os outros com os seus argumentos?"
        ]
    }

    if arquivo is not None:
        df = pd.read_csv(arquivo, encoding="utf-8")
        col_nome = [col for col in df.columns if "nome do(a) aluno(a)" in col.lower()][0]

        st.success("‚úÖ Arquivo carregado com sucesso!")
        aluno = st.selectbox("üë§ Selecione um aluno", df[col_nome].unique())
        df_aluno = df[df[col_nome] == aluno]

        medias_blocos = []

        for bloco, perguntas in blocos.items():
            st.subheader(f"üìö Bloco: {bloco}")
            perguntas_existentes = [p for p in perguntas if p in df.columns]
            if not perguntas_existentes:
                st.warning("‚ö†Ô∏è Nenhuma pergunta deste bloco foi encontrada.")
                continue

            respostas = df_aluno[perguntas_existentes].iloc[0]
            if bloco == "Caracter√≠sticas Gerais":
                respostas_numericas = respostas.map(mapa_diagnostico)
                for pergunta in perguntas_existentes:
                    original = df_aluno[pergunta].values[0]
                    st.markdown(f"**{pergunta}** ‚Üí _{original}_")
            else:
                respostas_numericas = respostas.map(mapa_respostas)

            media = pd.to_numeric(respostas_numericas, errors="coerce").mean()
            if pd.notna(media):
                medias_blocos.append(media)
                st.markdown(f"**Pontua√ß√£o m√©dia:** `{media:.2f} / 4.00`")
                st.progress(media / 4)
            else:
                st.warning("‚ö†Ô∏è N√£o foi poss√≠vel calcular a m√©dia (valores ausentes ou inv√°lidos).")

        # Campos descritivos
        campos_descritivos = [
            col for col in df.columns
            if any(kw in col.lower() for kw in ["atividades mais gosta", "√°reas esse(a) aluno(a)", "interesse", "destaque"])
        ]
        respostas_desc = df_aluno[campos_descritivos].iloc[0]
        if not respostas_desc.empty:
            st.markdown("### üí¨ Interesses e √Åreas de Destaque")
            for col, val in respostas_desc.items():
                if pd.notna(val) and str(val).strip():
                    st.markdown(f"**{col}** ‚Üí _{val}_")

        # Avalia√ß√£o geral
        st.subheader("üß† Avalia√ß√£o Geral ‚Äì Probabilidade de Altas Habilidades/Superdota√ß√£o")
        if medias_blocos:
            media_geral = sum(medias_blocos) / len(medias_blocos)
            percentual = (media_geral / 4) * 100
            st.metric("Probabilidade estimada", f"{percentual:.1f}%")
            st.progress(percentual / 100)
        else:
            st.warning("‚ö†Ô∏è N√£o foi poss√≠vel calcular a m√©dia geral ‚Äì dados insuficientes.")

        # Gr√°fico radar
        st.subheader("üìä Radar das Pontua√ß√µes por Bloco")
        escala = st.slider("üìê Escala visual do gr√°fico (quanto menor, mais compacto)", 3, 8, 5)

        labels = list(blocos.keys())
        valores = []

        for bloco in labels:
            perguntas_existentes = [p for p in blocos[bloco] if p in df.columns]
            respostas = df_aluno[perguntas_existentes].iloc[0]

            if bloco == "Caracter√≠sticas Gerais":
                respostas_numericas = respostas.map(mapa_diagnostico)
            else:
                respostas_numericas = respostas.map(mapa_respostas)

            media = pd.to_numeric(respostas_numericas, errors="coerce").mean()
            valores.append(media if pd.notna(media) else 0)

        num_blocos = len(labels)
        angles = np.linspace(0, 2 * np.pi, num_blocos, endpoint=False).tolist()
        valores += valores[:1]
        angles += angles[:1]
        labels += labels[:1]

        col1, col2, col3 = st.columns([1, 6, 1])
        with col2:
            fig, ax = plt.subplots(figsize=(escala, escala * 0.8), subplot_kw=dict(polar=True))
            ax.plot(angles, valores, linewidth=2, linestyle='solid', marker='o')
            ax.fill(angles, valores, alpha=0.25)
            ax.set_yticks([0, 1, 2, 3, 4])
            ax.set_yticklabels(['0', '1', '2', '3', '4'], fontsize=8)
            ax.set_ylim(0, 4)
            ax.set_xticks(angles)
            ax.set_xticklabels(labels, fontsize=9)
            ax.set_title(f'Radar das Pontua√ß√µes ‚Äì {aluno}', size=13, pad=10)
            st.pyplot(fig)

            # Exportar imagem PNG
            buf = io.BytesIO()
            fig.savefig(buf, format="png", bbox_inches="tight")
            buf.seek(0)

            nome_limpo = aluno.replace(" ", "_").lower()
            nome_arquivo = f"grafico_radar_{nome_limpo}.png"
            st.download_button(
                label="üì• Baixar gr√°fico como imagem (PNG)",
                data=buf,
                file_name=nome_arquivo,
                mime="image/png"
            )

    else:
        st.info("Envie um arquivo .csv com as respostas estruturadas conforme o modelo.")
