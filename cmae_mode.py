import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import io
from reportlab.lib.pagesizes import letter
from reportlab.pdfgen import canvas
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle, Image
from reportlab.lib.styles import getSampleStyleSheet
from reportlab.lib import colors
from docx import Document
from docx.shared import Inches

def carregar_dados(uploaded_file):
    """Carrega os dados do arquivo e calcula a idade do aluno na data da avalia√ß√£o."""
    df = pd.read_excel(uploaded_file, engine="openpyxl")
    df.columns = df.columns.str.strip()

    df.rename(columns={
        "Nome completo do aluno:": "Aluno",
        "Unidade escolar de origem do encaminhamento": "Unidade",
        "Data da avalia√ß√£o:": "Data_Avaliacao",
        "Data de Nascimento:": "Data_Nascimento",
        "Nome do professor e demais profissionais que responderam o formul√°rio:": "Professor"
    }, inplace=True)

    if "Data_Nascimento" not in df or "Data_Avaliacao" not in df:
        return None

    df["Data_Nascimento"] = pd.to_datetime(df["Data_Nascimento"], errors="coerce")
    df["Data_Avaliacao"] = pd.to_datetime(df["Data_Avaliacao"], errors="coerce")

    df["Ano"], df["Meses"], df["Meses_Totais"] = zip(*df.apply(
        lambda row: calcular_idade(row["Data_Nascimento"], row["Data_Avaliacao"]) if pd.notna(row["Data_Nascimento"]) and pd.notna(row["Data_Avaliacao"]) else (None, None, None),
        axis=1
    ))

    return df

def calcular_idade(data_nascimento, data_avaliacao):
    """Calcula a idade do aluno na data da avalia√ß√£o."""
    if pd.isnull(data_nascimento) or pd.isnull(data_avaliacao):
        return None, None, None

    idade_anos = data_avaliacao.year - data_nascimento.year
    idade_meses = data_avaliacao.month - data_nascimento.month

    if data_avaliacao.day < data_nascimento.day:
        idade_meses -= 1

    if idade_meses < 0:
        idade_anos -= 1
        idade_meses += 12

    meses_totais = (idade_anos * 12) + idade_meses

    # Ajuste de arredondamento de at√© 2 dias
    diferenca_dias = (data_avaliacao - data_nascimento).days
    if 0 < diferenca_dias % 30 <= 2:
        meses_totais += 1
        idade_meses += 1

    return idade_anos, idade_meses, meses_totais

CORES_FIXAS_STATUS = {
    "Sem atraso ‚úÖ": "#2E7D32",
    "Alerta para atraso ‚ö†Ô∏è": "#FFC107",
    "Poss√≠vel D√©ficit üö®": "#D32F2F"
}

CATEGORIAS_VALIDAS = ["Socializa√ß√£o", "Linguagem", "Cogni√ß√£o", "Auto cuidado", "Desenvolvimento Motor"]

def calcular_status_aluno(df, categoria, meses_faixa_etaria, pontuacao_esperada_manual=None):
    categorias = CATEGORIAS_VALIDAS if categoria == "Todas" else [categoria]
    df_resultado = []

    for _, row in df.iterrows():
        for categoria in categorias:
            colunas_categoria = [col for col in df.columns if col.startswith(categoria)]
            total_perguntas = len(colunas_categoria)

            if total_perguntas == 0:
                continue  

            pontos_obtidos = sum([
                1 if row[col] == "Sim" else 0.5 if row[col] == "√Äs vezes" else 0
                for col in colunas_categoria
            ])

            idade_meses = row["Meses"]
            if pd.isna(idade_meses):
                idade_meses = 0  

            if pd.isna(meses_faixa_etaria) or meses_faixa_etaria == 0:
                pontuacao_esperada = 0  
            else:
                pontuacao_esperada = (idade_meses * total_perguntas) / meses_faixa_etaria

            if pontuacao_esperada_manual is not None:
                pontuacao_esperada = pontuacao_esperada_manual

            if pontos_obtidos >= pontuacao_esperada:
                status = "Sem atraso ‚úÖ"
            elif pontos_obtidos >= (pontuacao_esperada - 2):
                status = "Alerta para atraso ‚ö†Ô∏è"
            else:
                status = "Poss√≠vel D√©ficit üö®"

            df_resultado.append({
                "Aluno": row["Aluno"],
                "Categoria": categoria,
                "Pontua√ß√£o Obtida": pontos_obtidos,
                "Pontua√ß√£o Esperada": round(pontuacao_esperada, 2),
                "Status": status
            })

    df_resultado = pd.DataFrame(df_resultado)
    return df_resultado if not df_resultado.empty else None

def gerar_texto_analise(status_alunos):
    """Gera um par√°grafo din√¢mico com base nos resultados do aluno no invent√°rio."""
    
    if status_alunos.empty:
        return "N√£o h√° dados suficientes para an√°lise."

    categorias_por_status = {
        "Sem atraso ‚úÖ": [],
        "Alerta para atraso ‚ö†Ô∏è": [],
        "Poss√≠vel D√©ficit üö®": []
    }

    for _, row in status_alunos.iterrows():
        categorias_por_status[row["Status"].strip()].append(row["Categoria"].strip())

    frases_status = {
        "Sem atraso ‚úÖ": "dentro do esperado para a faixa et√°ria, indicando progresso adequado e consolidado",
        "Alerta para atraso ‚ö†Ô∏è": "com ind√≠cios de dificuldades, apontando a necessidade de maior estimula√ß√£o para fortalecer o desenvolvimento esperado",
        "Poss√≠vel D√©ficit üö®": "abaixo do esperado para a faixa et√°ria, sugerindo poss√≠veis dificuldades que demandam aten√ß√£o e estimula√ß√£o espec√≠fica"
    }

    partes_texto = []

    for status, categorias in categorias_por_status.items():
        if categorias:
            lista_categorias = ", ".join(categorias[:-1]) + (" e " + categorias[-1] if len(categorias) > 1 else categorias[0])
            partes_texto.append(f"a(s) √°rea(s) de {lista_categorias} est√°(√£o) {frases_status[status]}")

    if partes_texto:
        return f"Com base nas respostas ao invent√°rio, observa-se que {', '.join(partes_texto)}."
    
    return "N√£o h√° dados relevantes para an√°lise."

def gerar_pdf(filtros, status_alunos, img_grafico,):
    buffer = io.BytesIO()
    doc = SimpleDocTemplate(buffer, pagesize=letter, leftMargin=40, rightMargin=40, topMargin=40, bottomMargin=20)
    elements = []
    styles = getSampleStyleSheet()

    elements.append(Paragraph("Centro Municipal de Atendimento Especializado ‚Äì CMAE", styles["Title"]))
    elements.append(Spacer(1, 12))

    for chave, valor in filtros.items():
        elements.append(Paragraph(f"<b>{chave}:</b> {valor}", styles["Normal"]))
    elements.append(Spacer(1, 12))

    if not status_alunos.empty:
        elements.append(Paragraph("üìä Estat√≠stica(s) do(s) Aluno(s) - INVENT√ÅRIO PORTAGE", styles["Heading2"]))
        
        for aluno in status_alunos["Aluno"].unique():
            elements.append(Spacer(1, 12))
            dados_tabela = status_alunos[status_alunos["Aluno"] == aluno][["Categoria", "Pontua√ß√£o Obtida", "Pontua√ß√£o Esperada", "Status"]]
            tabela = Table([dados_tabela.columns.tolist()] + dados_tabela.values.tolist(), colWidths=[120, 110, 110, 120])
            tabela.setStyle(TableStyle([
                ("BACKGROUND", (0, 0), (-1, 0), colors.grey),
                ("TEXTCOLOR", (0, 0), (-1, 0), colors.whitesmoke),
                ("ALIGN", (0, 0), (-1, -1), "CENTER"),
                ("FONTNAME", (0, 0), (-1, 0), "Helvetica-Bold"),
                ("BOTTOMPADDING", (0, 0), (-1, 0), 8),
                ("GRID", (0, 0), (-1, -1), 1, colors.black),
            ]))

        elements.append(Paragraph("Observa√ß√£o: √â importante considerar que os resultados referem-se apenas a faixa et√°ria analisada, sendo esta uma avalia√ß√£o parcial, com vistas qualitativas."))
        elements.append(Spacer(1, 12))
        elements.append(tabela)
        elements.append(Spacer(1, 12))

    if img_grafico:
        img_path = "grafico_temp.png"
        with open(img_path, "wb") as f:
            f.write(img_grafico.getvalue())

        elements.append(Image(img_path, width=300, height=200))
        texto_analise = gerar_texto_analise(status_alunos)
        elements.append(Spacer(1, 12))
        elements.append(Paragraph(texto_analise, styles["Normal"]))
        elements.append(Spacer(1, 12))
        elements.append(Paragraph("O Invent√°rio Portage Operacionalizado (IPO) vem sendo respondido pelos professores dos Centros de Educa√ß√£o Infantil, de maneira adaptada e parcial, como forma de levantar dados e acompanhar o desenvolvimento das crian√ßas."
        " Para investiga√ß√£o mais aprofundada, sugere-se a aplica√ß√£o do Invent√°rio Dimensional de Avalia√ß√£o do Desenvolvimento Infantil - IDADI.", styles["Normal"]))

    doc.build(elements)
    buffer.seek(0)
    return buffer

# Fun√ß√£o para gerar o relat√≥rio em Word
def gerar_word(filtros, status_alunos, img_grafico):
    buffer = io.BytesIO()
    doc = Document()

    doc.add_heading("Centro Municipal de Atendimento Especializado ‚Äì CMAE", level=1)

    # Adicionar filtros ao documento
    for chave, valor in filtros.items():
        doc.add_paragraph(f"{chave}: {valor}")

    doc.add_heading("üìä Estat√≠sticas do(s) Aluno(s) - INVENT√ÅRIO PORTAGE", level=2)

    alunos_unicos = status_alunos["Aluno"].unique()
    for aluno in alunos_unicos:
        # Criando tabela de pontua√ß√£o
        tabela = status_alunos[status_alunos["Aluno"] == aluno][["Categoria", "Pontua√ß√£o Obtida", "Pontua√ß√£o Esperada", "Status"]]
        table = doc.add_table(rows=1, cols=4)
        table.style = "Table Grid"
        hdr_cells = table.rows[0].cells
        hdr_cells[0].text = "Categoria"
        hdr_cells[1].text = "Pontua√ß√£o Obtida"
        hdr_cells[2].text = "Pontua√ß√£o Esperada"
        hdr_cells[3].text = "Status"

        for _, row in tabela.iterrows():
            row_cells = table.add_row().cells
            row_cells[0].text = row["Categoria"]
            row_cells[1].text = str(row["Pontua√ß√£o Obtida"])
            row_cells[2].text = str(row["Pontua√ß√£o Esperada"])
            row_cells[3].text = row["Status"]

    # Adiciona a an√°lise do aluno
    texto_analise = gerar_texto_analise(status_alunos)
    doc.add_paragraph("\nAn√°lise Geral:")
    doc.add_paragraph(texto_analise)

    # Adicionar imagem do gr√°fico se dispon√≠vel
    if img_grafico:
        img_path = "grafico_temp.png"
        with open(img_path, "wb") as f:
            f.write(img_grafico.getvalue())

        doc.add_paragraph("\nüìä Gr√°fico de Resultados:")
        doc.add_picture(img_path, width=Inches(4))

    doc.add_paragraph("\nO Invent√°rio Portage Operacionalizado (IPO) vem sendo respondido pelos professores dos Centros de Educa√ß√£o Infantil, de maneira adaptada e parcial, como forma de levantar dados e acompanhar o desenvolvimento das crian√ßas. Para investiga√ß√£o mais aprofundada, sugere-se a aplica√ß√£o do Invent√°rio Dimensional de Avalia√ß√£o do Desenvolvimento Infantil - IDADI.")

    doc.save(buffer)
    buffer.seek(0)
    return buffer

def run_cmae_mode():
    st.title("üìä Painel Interativo de Avalia√ß√£o (Modo CMAE)")

    uploaded_file = st.file_uploader("üìÇ Envie a planilha de respostas", type=["xlsx"])
    
    if not uploaded_file:
        st.info("üîç Envie a planilha para iniciar a an√°lise.")
        return
    
    df = carregar_dados(uploaded_file)
    if df is None:
        st.error("Erro ao carregar os dados. Verifique se as colunas necess√°rias est√£o presentes.")
        return
    
    df["Unidade"] = df["Unidade"].astype(str).str.strip()

    st.sidebar.header("üéØ **Filtros**")
    unidades = ["Todas"] + sorted(df["Unidade"].dropna().unique().tolist())
    unidade_selecionada = st.sidebar.selectbox("üè´ **Unidade Escolar**", unidades)

    categorias = ["Todas"] + CATEGORIAS_VALIDAS
    categoria_selecionada = st.sidebar.selectbox("üß© **Categoria**", categorias)

    aluno_lista = df["Aluno"].dropna().unique().tolist()
    aluno_lista.insert(0, "Todos")
    aluno_selecionado = st.sidebar.selectbox("üë¶ **Pesquise um aluno**", aluno_lista)

    tipo_grafico = st.sidebar.selectbox(
    "üìä **Escolha o tipo de gr√°fico**",
    ["Barras", "Barras Empilhadas", "Barras por Resposta", "Pizza", "Linha"]
    )

    largura = st.sidebar.slider("üìè **Largura do Gr√°fico**", min_value=4, max_value=12, value=6, step=1)
    altura = st.sidebar.slider("üìê **Altura do Gr√°fico**", min_value=3, max_value=10, value=4, step=1)

    if st.sidebar.button("üîÑ **Atualizar Dados**"):
        st.rerun()

    if unidade_selecionada != "Todas":
        df = df[df["Unidade"] == unidade_selecionada]
    if aluno_selecionado != "Todos":
        df = df[df["Aluno"] == aluno_selecionado]
    if not df.empty:
        aluno_info = df.iloc[0]
        filtros = {
            "Nome do Aluno": aluno_info.get("Aluno", "N/A"),
            "Unidade Escolar": aluno_info.get("Unidade", "N/A"),
            "Data da Avalia√ß√£o": aluno_info.get("Data_Avaliacao", "N/A"),
            "Data de Nascimento": aluno_info.get("Data_Nascimento", "N/A"),
            "Idade": f"{aluno_info.get('Ano', 'N/A')} anos e {aluno_info.get('Meses', 'N/A')} meses",
            "Professor": aluno_info.get("Professor", "N/A")
        }

        st.write("### üìÑ Informa√ß√µes do Aluno")
        for key, value in filtros.items():
            st.write(f"**{key}:** {value}")

    else:
        st.warning("Nenhum dado encontrado com os filtros selecionados.")
        return

    status_alunos = calcular_status_aluno(df, categoria_selecionada, 12)

    if status_alunos is not None and not status_alunos.empty:
        st.write(f"### üìä Estat√≠sticas para {aluno_selecionado} na Categoria: {categoria_selecionada}")
        st.dataframe(status_alunos)

        status_counts = status_alunos["Status"].value_counts()
        fig, ax = plt.subplots(figsize=(largura, altura))
        cores = [CORES_FIXAS_STATUS.get(status, "#000000") for status in status_counts.index]

        if tipo_grafico == "Barras":
            status_counts = status_alunos["Status"].value_counts()
            cores = [CORES_FIXAS_STATUS.get(status, "#000000") for status in status_counts.index]
            ax.bar(status_counts.index, status_counts.values, color=cores)
            ax.set_ylabel("Quantidade")
            ax.set_title("Distribui√ß√£o dos Status")

        elif tipo_grafico == "Barras Empilhadas":
            df_stack = status_alunos.groupby(["Categoria", "Status"]).size().unstack(fill_value=0)
            cores_stack = [CORES_FIXAS_STATUS.get(status, "#000000") for status in df_stack.columns]
            df_stack.plot(kind="bar", stacked=True, ax=ax, color=cores_stack)
            ax.set_ylabel("Quantidade")
            ax.set_title("Distribui√ß√£o de Status por Categoria")
            ax.legend(title="Status", bbox_to_anchor=(1.05, 1), loc="upper left")
            plt.tight_layout()

        elif tipo_grafico == "Pizza":
            status_counts = status_alunos["Status"].value_counts()
            cores = [CORES_FIXAS_STATUS.get(status, "#000000") for status in status_counts.index]
            ax.pie(status_counts.values, labels=status_counts.index, autopct='%1.1f%%', colors=cores)
            ax.axis("equal")
            ax.set_title("Distribui√ß√£o dos Status")

        elif tipo_grafico == "Linha":
            status_counts = status_alunos["Status"].value_counts()
            ax.plot(status_counts.index, status_counts.values, marker='o', linestyle='-')
            ax.set_ylabel("Quantidade")
            ax.set_title("Distribui√ß√£o dos Status")
        
        elif tipo_grafico == "Barras por Resposta":
            categorias_ativas = CATEGORIAS_VALIDAS if categoria_selecionada == "Todas" else [categoria_selecionada]

            # Inicializa um dicion√°rio para contar "Sim", "√Äs vezes" e "N√£o" por categoria
            dados_respostas = {cat: {"Sim": 0, "√Äs vezes": 0, "N√£o": 0} for cat in categorias_ativas}

            for _, row in df.iterrows():
                for cat in categorias_ativas:
                    colunas = [col for col in df.columns if col.startswith(cat)]
                    for col in colunas:
                        valor = row[col]
                        if valor in ["Sim", "√Äs vezes", "N√£o"]:
                            dados_respostas[cat][valor] += 1

            # Converte para DataFrame para facilitar a plotagem
            df_resposta = pd.DataFrame(dados_respostas).T[["Sim", "√Äs vezes", "N√£o"]]

            cores_resp = ["#2E7D32", "#FFC107", "#D32F2F"]
            df_resposta.plot(kind="bar", stacked=True, ax=ax, color=cores_resp)

            ax.set_ylabel("Quantidade de Respostas")
            ax.set_title("Distribui√ß√£o das Respostas por Categoria")
            ax.legend(title="Resposta", bbox_to_anchor=(1.05, 1), loc="upper left")
            plt.tight_layout()

        st.pyplot(fig)

        buffer_grafico = io.BytesIO()
        fig.savefig(buffer_grafico, format="png")
        buffer_grafico.seek(0)

        st.download_button(
            "üì• Baixar Relat√≥rio Completo (PDF)",
            gerar_pdf(filtros, status_alunos, buffer_grafico),
            file_name="relatorio_CMAE.pdf",
            mime="application/pdf"
        )
        
        # Criar bot√£o de download apenas para o gr√°fico
        st.download_button(
            "üì• Baixar Gr√°fico",
            buffer_grafico,
            file_name="grafico_CMAE.png",
            mime="image/png"
        )
        buffer_word = gerar_word(filtros, status_alunos, buffer_grafico)
        st.download_button(
        "üì• Baixar Relat√≥rio Completo (Word)",
        buffer_word,
        file_name="relatorio_CMAE.docx",
        mime="application/vnd.openxmlformats-officedocument.wordprocessingml.document"
        )